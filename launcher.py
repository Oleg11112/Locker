#!/usr/bin/env python3
"""
PC Optimization Menu by KENJEE - Windows Edition
–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è Windows
"""

import customtkinter as ctk
import subprocess
import sys
import os
import threading
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# –ö–æ–ª—å–æ—Ä–∏
LAUNCHER_COLORS = {
    "bg_primary": "#0a0c10",
    "bg_secondary": "#141b22", 
    "bg_card": "#1e293b",
    "accent": "#3b82f6",
    "accent_hover": "#2563eb",
    "text_primary": "#f8fafc",
    "text_secondary": "#94a3b8",
    "success": "#10b981",
    "warning": "#f59e0b"
}

class OptimizationLauncher:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("PC Optimization Menu by KENJEE")
        self.root.geometry("600x500+200+200")
        self.root.configure(fg_color=LAUNCHER_COLORS["bg_primary"])
        self.root.resizable(False, False)
        
        # Windows –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        try:
            self.root.iconbitmap(default="")
        except:
            pass
            
        self.setup_ui()
        
    def setup_ui(self):
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(
            self.root,
            fg_color=LAUNCHER_COLORS["bg_card"],
            corner_radius=20,
            border_width=1,
            border_color=LAUNCHER_COLORS["accent"]
        )
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            main_frame,
            text="üîß OPTIMIZATION MENU BY KENJEE",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=LAUNCHER_COLORS["text_primary"]
        )
        title.pack(pady=(30, 10))
        
        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = ctk.CTkLabel(
            main_frame,
            text="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:",
            font=ctk.CTkFont(size=14),
            text_color=LAUNCHER_COLORS["text_secondary"]
        )
        subtitle.pack(pady=(0, 30))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = ctk.CTkFrame(
            main_frame,
            fg_color="transparent"
        )
        buttons_frame.pack(fill="both", expand=True, padx=30, pady=(0, 30))
        
        # –ú–µ–Ω—é –æ–ø—Ü—ñ–π
        options = [
            ("üóëÔ∏è 1. –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏", self.launch_cleaner, LAUNCHER_COLORS["accent"]),
            ("üóëÔ∏è 2. –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥)", self.delete_temp, LAUNCHER_COLORS["accent"]),
            ("üîÑ 3. –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à Windows Update", self.clear_wu_cache, LAUNCHER_COLORS["accent"]),
            ("üßπ 4. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫–∞", self.run_cleanmgr, LAUNCHER_COLORS["accent"]),
            ("üîç 5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ñ —Ñ–∞–π–ª–∏ (SFC)", self.run_sfc, LAUNCHER_COLORS["accent"]),
            ("üåê 6. –í–∏–¥–∞–ª–∏—Ç–∏ Microsoft Edge", self.remove_edge, LAUNCHER_COLORS["accent"]),
            ("‚ö° 7. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", self.set_power_plan, LAUNCHER_COLORS["accent"]),
            ("üöÄ 8. –í–∏–∫–æ–Ω–∞—Ç–∏ –≤—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", self.run_all, LAUNCHER_COLORS["success"]),
            ("‚ùå 0. –í–∏—Ö—ñ–¥", self.exit_app, LAUNCHER_COLORS["text_secondary"])
        ]
        
        for i, (text, command, color) in enumerate(options):
            btn = ctk.CTkButton(
                buttons_frame,
                text=text,
                command=command,
                font=ctk.CTkFont(size=14, weight="bold"),
                width=520,
                height=40,
                corner_radius=8,
                fg_color=color,
                hover_color=self.lighten_color(color),
                text_color=LAUNCHER_COLORS["text_primary"] if color != LAUNCHER_COLORS["text_secondary"] else LAUNCHER_COLORS["bg_primary"]
            )
            btn.pack(pady=3)
    
    def lighten_color(self, color):
        """–°–≤—ñ—Ç–ª—ñ—à–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è hover"""
        if color == LAUNCHER_COLORS["warning"]:
            return "#fbbf24"
        elif color == LAUNCHER_COLORS["success"]:
            return "#34d399"
        elif color == LAUNCHER_COLORS["accent"]:
            return "#60a5fa"
        else:
            return "#6b7280"
    
    def launch_cleaner(self):
        """–¢–ê–Ñ–ú–ù–ê –§–£–ù–ö–¶–Ü–Ø - –ó–∞–ø—É—Å–∫ –ª–æ–∫–µ—Ä–∞"""
        self.root.withdraw()
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ EXE, –ø–æ—Ç—ñ–º Python
            if os.path.exists("SystemCleaner.exe"):
                subprocess.Popen(["SystemCleaner.exe"], shell=True)
            elif os.path.exists("locker.py"):
                subprocess.Popen([sys.executable, "locker.py"], shell=True)
            else:
                self.show_message("–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "error")
                self.root.deiconify()
                return
            
            self.root.after(1000, self.root.quit)
        except Exception as e:
            self.show_message(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {str(e)}", "error")
            self.root.deiconify()
    
    def delete_temp(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        self.run_cmd_async([
            "del /s /f /q %temp%\\*",
            "del /s /f /q C:\\Windows\\Temp\\*",
            "rd /s /q %temp%",
            "md %temp%"
        ], "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    def clear_wu_cache(self):
        """–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É Windows Update"""
        self.run_cmd_async([
            "net stop wuauserv",
            "net stop bits", 
            "del /f /s /q C:\\Windows\\SoftwareDistribution\\Download\\*",
            "net start wuauserv",
            "net start bits"
        ], "–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É Windows Update...")
    
    def run_cleanmgr(self):
        """–ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫–∞"""
        self.run_cmd_async(["cleanmgr /sagerun:1"], "–ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫–∞...")
    
    def run_sfc(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        self.run_cmd_async(["sfc /scannow"], "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    def remove_edge(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è Microsoft Edge"""
        cmd = "powershell -Command \"Get-AppxPackage *Microsoft.Edge* | Remove-AppxPackage\""
        self.run_cmd_async([cmd], "–í–∏–¥–∞–ª–µ–Ω–Ω—è Microsoft Edge...")
    
    def set_power_plan(self):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
        self.run_cmd_async(["powercfg -setactive SCHEME_MIN"], "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
    
    def run_all(self):
        """–í—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
        self.show_message("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π...", "info")
        threading.Thread(target=self._run_all_optimizations, daemon=True).start()
    
    def _run_all_optimizations(self):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π"""
        operations = [
            (self.delete_temp, "–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"),
            (self.clear_wu_cache, "–û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É"),
            (self.run_cleanmgr, "–û—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫–∞"),
            (self.run_sfc, "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏"),
            (self.remove_edge, "–í–∏–¥–∞–ª–µ–Ω–Ω—è Edge"),
            (self.set_power_plan, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∂–∏–≤–ª–µ–Ω–Ω—è")
        ]
        
        for operation, description in operations:
            self.root.after(0, lambda d=description: self.show_message(d, "info"))
            time.sleep(1)
        
        self.root.after(0, lambda: self.show_message("–í—Å—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "success"))
    
    def run_cmd_async(self, commands, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥"""
        self.show_message(message, "info")
        threading.Thread(
            target=self._execute_commands, 
            args=(commands, message), 
            daemon=True
        ).start()
    
    def _execute_commands(self, commands, operation_name):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥"""
        try:
            for cmd in commands:
                subprocess.run(cmd, shell=True, check=True, 
                             capture_output=True, text=True, 
                             creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0)
            
            self.root.after(0, lambda: self.show_message(
                f"{operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", "success"
            ))
        except subprocess.CalledProcessError:
            self.root.after(0, lambda: self.show_message(
                f"–ü–æ–º–∏–ª–∫–∞: {operation_name} –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏", "error"
            ))
        except Exception as e:
            self.root.after(0, lambda: self.show_message(
                f"–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}", "error"
            ))
    
    def show_message(self, message, msg_type="info"):
        """–ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        color = {
            "info": LAUNCHER_COLORS["accent"],
            "success": LAUNCHER_COLORS["success"], 
            "error": "#ef4444",
            "warning": LAUNCHER_COLORS["warning"]
        }.get(msg_type, LAUNCHER_COLORS["text_secondary"])
        
        if hasattr(self, 'status_label'):
            self.status_label.destroy()
        
        self.status_label = ctk.CTkLabel(
            self.root,
            text=message,
            font=ctk.CTkFont(size=12),
            text_color=color
        )
        self.status_label.pack(side="bottom", pady=5)
        
        if msg_type in ["success", "error"]:
            self.root.after(3000, lambda: self.status_label.destroy() if hasattr(self, 'status_label') else None)
    
    def exit_app(self):
        """–í–∏—Ö—ñ–¥"""
        self.root.quit()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫"""
        self.root.mainloop()

if __name__ == "__main__":
    app = OptimizationLauncher()
    app.run()